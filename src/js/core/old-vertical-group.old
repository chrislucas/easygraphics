/* JSHint configurations */
/* jshint esversion: 6 */
/* jshint -W097 */

/**
 * Created by Leandro Luque on 08/06/2017.
 */

'use strict';

import GraphicalElement from './graphical-element';
import BoundingBox from './bounding-box';
import VerticalGroupChildChangeListener from './listener/vertical-group-child-change-listener';
import {isNotNull} from "./util";
import SVGAreaConstants from "../svg/svg-area-constants";
import ChangeListenerConstants from "./listener/change-listener-constants";
import VerticalGroupChild from "./vertical-group-child";

export default class OldVerticalGroup extends GraphicalElement {

    constructor({x1, x, y1, y, style, groupStyle} = {}) {
        super(...arguments);

        this._groupStyle = groupStyle;
        this._children = [];
        this._frame = null;

        // Does the group must fit its content?
        // If the user resize it, for example, this attribute may be changed to false.
        // Otherwise, the resizing won't be applied.
        this._fitContent = true;

        this._adjustGroupWhenChildrenChange = 0; // Must listeners be notified about changes?
        // 0 means yes.
        // Any value greater than 0 means a recursive call to
        // disable change notifications.
    }

    // The child goes further the content area and touches the frame borders.
    static get MATCH_PARENT() {
        return 3;
    }

    // The child does not use horizontal margins for elements.
    static get MATCH_CONTENT_AREA() {
        return 2;
    }

    // The child uses the parent space 'us the margins.
    static get FILL_SPACE() {
        return 1;
    }

    static get WRAP_CONTENT() {
        return 0;
    }

    static get LEFT() {
        return 0;
    }

    static get CENTER() {
        return 1;
    }

    static get RIGHT() {
        return 2;
    }

    /**
     * Returns the group x coordinate.
     * @returns {number} The group x coordinate.
     */
    get x1() {
        return super.x1;
    }

    /**
     * Sets the group x coordinate.
     * @param {number} value The new x coordinate.
     */
    set x1(value) {
        if (value === this.x1) return;

        // Calculate the difference between the current x value and the new one.
        let delta = value - this.x1;

        this.moveBy({x: delta});
        if (isNotNull(this.frame)) {
            this.frame.moveBy({x: delta});
        }

        //*****************************
        // Move all children.
        this.disableGroupChangingWhenChildrenChange(); // The dimension does not have to change in this case.
        for (let i = 0; i < this.countChildren(); i++) {
            this.child(i).moveBy({x: delta});
        }
        this.enableGroupChangingWhenChildrenChange();
    }

    /**
     * Returns the group y coordinate.
     * @returns {number} The group y coordinate.
     */
    get y1() {
        return super.y1;
    }

    /**
     * Changes the group y coordinate.
     * @param {number} value The new y coordinate.
     */
    set y1(value) {
        if (value === this.y1) return;

        // Calculate the difference between the current y value and the new one.
        let delta = value - this.y1;

        super.moveBy({y: delta});
        if (isNotNull(this.frame)) {
            this.frame.moveTo({y: this.y});
        }

        //*****************************
        // Move all children.
        this.disableGroupChangingWhenChildrenChange(); // The dimension does not have to change in this case.
        for (let i = 0; i < this.countChildren(); i++) {
            this.child(i).moveBy({y: delta});
        }
        this.enableGroupChangingWhenChildrenChange();
    }

    /**
     * Returns the group x2.
     * @returns {number} The group x2.
     */
    get x2() {
        return super.x2;
    }

    /**
     * Sets the group x2-coordinate.
     * @param {number} value The new x2.
     */
    set x2(value) {
        if (value === this.x2) return;

        this.disableChangeNotifications();
        this.disableGroupChangingWhenChildrenChange();

        let minimumRequiredWidth = this.minContentWidth;
        if (isNotNull(this.frame)) {
            let boundingBox = new BoundingBox({x1: this.x, y1: this.y, x2: this.x + minimumRequiredWidth, y2: this.y2});
            minimumRequiredWidth = this.frame.widthToFit(boundingBox);
        }
        if (value < minimumRequiredWidth) { // Do not resize if the content does not fit the new width.
            return;
        }

        super.width = value;

        // Check whether the height must be changed.
        // It must be necessary if the frame is a circle or a square, for example.
        if (isNotNull(this.frame)) {
            this.frame.width = this.width;
            super.height = this.frame.height;
        }

        this.adjustChildrenPositionAndDimension();

        this.enableChangeNotifications();
        this.enableGroupChangingWhenChildrenChange();
    }

    /**
     * Calculates and returns the minimum width required to display the group content.
     * @returns {number} The minimum width required to display the group content.
     */
    get minContentWidth() {
        let calcMinWidth = 0;
        // Get the biggest child min width and add the horizontal margin when necessary.
        for (let i = 0; i < this.countChildren(); i++) {
            let child = this.child(i);
            if (child.minWidth > calcMinWidth) {
                calcMinWidth = child.minWidth;
                // MATCH_CONTENT_AREA does not use horizontal margins for elements.
                // It is used for lines, for example.
                if (this.childResizePolicy(i) !== VerticalGroup.MATCH_CONTENT_AREA &&
                    this.childResizePolicy(i) !== VerticalGroup.MATCH_PARENT) {
                    calcMinWidth += 2 * this.horMargin;
                }
            }
        }
        return calcMinWidth;
    }

    /**
     * Calculates and returns the minimum width required to display the group frame and its content.
     * @returns {number} The minimum width required to display the group frame and its content.
     */
    get minWidth() {
        let calcMinWidth = this.minContentWidth;

        if (isNotNull(this.frame)) {
            let boundingBox = new BoundingBox({x1: this.x, y1: this.y, x2: this.x + calcMinWidth, y2: this.y2});
            let frameWidth = this.frame.widthToFit(boundingBox);
            return frameWidth;
        }

        return calcMinWidth;
    }

    /**
     * Returns the group height.
     * @returns {number} The group height.
     */
    get height() {
        return super.height;
    }

    /**
     * Sets the group height.
     * @param {number} value The group height.
     */
    set height(value) {
        this.disableChangeNotifications();
        this.disableGroupChangingWhenChildrenChange(); // Prevent stack overflow.
        let minimumRequiredHeight = this.minHeight;
        if (value < minimumRequiredHeight) {
            return;
        }

        super.height = value;

        // Check whether the width must be changed.
        // It must be necessary if the frame is a circle or a square, for example.
        if (isNotNull(this.frame)) {
            this.frame.height = this.height;
            super.width = this.frame.width;
        }

        this.adjustChildrenPositionAndDimension();

        this.enableChangeNotifications();
        this.enableGroupChangingWhenChildrenChange();
    }

    /**
     * Calculates and returns the minimum height required to display the group content.
     * @returns {number} The minimum height required to display the group content.
     */
    get minContentHeight() {
        let contentMinHeight = 0;
        let i = 0;
        for (let i = 0; i < this.countChildren(); i++) {
            contentMinHeight += this.verMargin;
            contentMinHeight += this.child(i).minHeight + this.childOverlap(i);
            i++;
        }
        if (this.countChildren() > 0) {
            contentMinHeight += this.verMargin;
        }

        return contentMinHeight;
    }

    /**
     * Calculates and returns the minimum height required to display the group frame and its content.
     * @returns {number} The minimum height required to display the group frame and its content.
     */
    get minHeight() {
        let calcMinHeight = this.minContentHeight;

        if (isNotNull(this.frame)) {
            let boundingBox = new BoundingBox({x1: this.x, y1: this.y, x2: this.x2, y2: this.y + calcMinHeight});
            let frameHeight = this.frame.heightToFit(boundingBox);
            return frameHeight;
        }

        return calcMinHeight;
    }

    /**
     * Returns the children.
     * @returns {Array} The children.
     */
    get children() {
        return this._children;
    }

    /**
     * Returns the frame.
     * @returns {GraphicalElement|null} The frame.
     */
    get frame() {
        return this._frame;
    }

    // TODO: What to do when a frame is removed?
    /**
     * Sets the frame.
     * @param {GraphicalElement|null} value value The new frame.
     */
    set frame(value) {
        this.disableChangeNotifications();

        // Change the group width and height to accommodate the frame border.
        this.width += value.borderSize * 2;
        this.height += value.borderSize * 2;

        this._frame = value;
        this.getTag(SVGAreaConstants.DRAWN).appendChild(this.frame.getTag(SVGAreaConstants.DRAWN));
        this.frame.moveTo({x: this.x, y: this.y});
        this.frame.resizeTo({width: this.width, height: this.height});

        this.adjustChildrenPositionAndDimension();
        this.enableChangeNotifications();

        this.frame.notifyListeners(ChangeListenerConstants.POSITION, ChangeListenerConstants.DIMENSION);
        this.notifyListeners(ChangeListenerConstants.POSITION, ChangeListenerConstants.DIMENSION);
    }

    get changeGroupWhenChildrenChange() {
        return this._adjustGroupWhenChildrenChange === 0;
    }

    get fitContent() {
        return this._fitContent;
    }

    set fitContent(value) {
        this._fitContent = value;
    }

    get groupStyle() {
        return this._groupStyle;
    }

    set groupStyle(value) {
        this._groupStyle = value;
        this.notifyListeners(ChangeListenerConstants.STYLING);
    }

    /**
     * Returns the horizontal margin.
     * @returns {number} The horizontal margin.
     */
    get horMargin() {
        if (this.groupStyle !== null) {
            return this.groupStyle.horMargin;
        }
        return 0;
    }

    /**
     * Returns the vertical margin.
     * @returns {number} The vertical margin.
     */
    get verMargin() {
        if (this.groupStyle !== null) {
            return this.groupStyle.verMargin;
        }
        return 0;
    }

    get borderSize() {
        if (isNotNull(this.frame)) {
            return this.frame.borderSize;
        }
    }

    childResizePolicy(i) {
        return this.child(i).horResizingPolicy;
    }

    moveTo({x, y} = {}) {
        this.x = x;
        this.y = y;
    }

    childGravity(i) {
        return this.child(i).verGravity;
    }

    childWeightAt(i) {
        return this.child(i).weight;
    }

    childOverlap(i) {
        return this.child(i).overlap;
    }

    /**
     * Recalculate children position and dimension.
     */
    adjustChildrenPositionAndDimension() {
        let availableWidthForChildren = this.width;
        let newX = this.x;
        let newY = this.y;
        let rightXLimit = this.x + this.width;
        let bottomYLimit = this.y + this.height;
        if (isNotNull(this.frame)) {
            let contentBox = this.frame.contentBox({width: this.width, height: this.height});
            availableWidthForChildren = contentBox.width;
            newX = contentBox.x1;
            newY = contentBox.y1;
            rightXLimit = contentBox.x2;
            bottomYLimit = contentBox.y2;
        }

        // Calculate the content height.
        let contentHeight = 0;
        if (this.countChildren() > 0) {
            contentHeight += this.verMargin;
        }
        let i = 0;
        for (let i = 0; i < this.countChildren(); i++) {
            contentHeight += this.child(i).height + this.childOverlap(i);
            contentHeight += this.verMargin;
            i++;
        }

        // Calculate the space left after drawing all children.
        let heightLeft = (bottomYLimit - newY) - contentHeight;
        // If the is space left, distribute it among the children with weight greater than zero (0).
        if (heightLeft > 0) {
            // Sum all children weight.
            let weightSum = 0;
            for (i = 0; i < this.countChildren(); i++) {
                weightSum += this.childWeightAt(i);
            }
            for (let i = 0; i < this.countChildren(); i++) {
                let element = this.child(i);
                if (this.childWeightAt(i) > 0) {
                    let deltaHeight = this.childWeightAt(i) / weightSum * heightLeft;
                    element.height += deltaHeight;
                }
            }
        }

        // Center content vertically inside the group.
        // It is important for squared frames as circles, for example.
        // Recalculate the content weight.
        contentHeight = 0;
        if (this.countChildren() > 0) {
            contentHeight += this.verMargin;
        }
        i = 0;
        for (let i = 0; i < this.countChildren(); i++) {
            contentHeight += this.child(i).height + this.childOverlap(i);
            contentHeight += this.verMargin;
            i++;
        }
        let deltaY = ((bottomYLimit - newY) - contentHeight) / 2;
        newY += deltaY + this.verMargin; // The vertical margin is necessary to start at the right position for the first child.

        // Adjust children's position and dimension.
        for (i = 0; i < this.countChildren(); i++) {
            //let oldChangeNotificationsStatus = this.children[i].changeNotificationsEnabled;
            this.child(i).disableChangeNotifications(); // Prevent cascade readjustments: parent changes child and child changes parent.

            if (this.childResizePolicy(i) === VerticalGroup.WRAP_CONTENT) {
                if (this.childGravity(i) === VerticalGroup.LEFT) {
                    this.child(i).moveXTo(newX + this.horMargin);
                } else if (this.childGravity(i) === VerticalGroup.RIGHT) {
                    this.child(i).moveXTo(rightXLimit - this.horMargin - this.child(i).width);
                } else {
                    this.child(i).moveXTo(((newX + rightXLimit) - this.child(i).width) / 2);
                }
            } else if (this.childResizePolicy(i) === VerticalGroup.FILL_SPACE) {
                this.child(i).resize({width: availableWidthForChildren - 2 * this.horMargin});
                this.child(i).moveXTo(newX + this.horMargin);
            } else if (this.childResizePolicy(i) === VerticalGroup.MATCH_CONTENT_AREA) {
                this.child(i).resize({width: availableWidthForChildren});
                this.child(i).moveXTo(newX);
            } else if (this.childResizePolicy(i) === VerticalGroup.MATCH_PARENT) {
                let boundaryX1 = this.boundaryX1For(newY);
                let boundaryX2 = this.boundaryX2For(newY);
                if (isNotNull(this.frame)) {
                    boundaryX1 = this.frame.boundaryX1For(newY);
                    boundaryX2 = this.frame.boundaryX2For(newY);
                }

                this.child(i).resizeTo({width: boundaryX2 - boundaryX1});
                this.child(i).moveXTo(boundaryX1);
            }

            newY += this.childOverlap(i);
            this.child(i).moveYTo(newY);
            newY += this.child(i).height + this.verMargin;

            this.child(i).enableChangeNotifications();
            this.child(i).notifyListeners(ChangeListenerConstants.POSITION, ChangeListenerConstants.DIMENSION);
        }
    }

    /**
     * Readjusts the group dimension.
     */
    readjustDimensions() {
        if (!this.changeGroupWhenChildrenChange) {
            return;
        }

        if (this.fitContent || this.minWidth > this.width) {
            this.width = this.minWidth;
        }
        if (this.fitContent || this.minHeight > this.height) {
            this.height = this.minHeight;
        }
    }

    /**
     * Increases the width value by the specified parameter value.
     * @param {number} value The width delta.
     */
    increaseWidthBy(value) {
        this.width += value;
    }

    /**
     * Increases the height value by the specified parameter value.
     * @param {number} value The height delta.
     */
    increaseHeightBy(value) {
        this.height += value;
    }

    /**
     * Appends a new child to the group.
     * @param child The child.
     * @param resizePolicy the child resize policy.
     * @param gravity The child horizontal gravity.
     */
    addChild({element, leftMargin = 0, rightMargin = 0, topMargin = 0, bottomMargin = 0, horResizingPolicy = 0, horGravity = 0, verWeight = 0, overlap = 0} = {}) {
        this.disableChangeNotifications(); // Avoid unnecessary change notifications.
        this.disableGroupChangingWhenChildrenChange(); // Avoid unnecessary readjustments.

        //*****************************
        // Increase the group height to fit the new child.
        let childRequiredHeight = element.height + this.verMargin + overlap;
        if (this.countChildren() == 0) { // Add another vertical margin to the first child.
            childRequiredHeight += this.verMargin;
        }
        this.increaseHeightBy(childRequiredHeight);

        //*****************************
        // Calculate the minimum width that the group must have to fit this new child in its content.
        let requiredGroupWidth = element.minWidth + 2 * this.horMargin;  // MARGIN + child + MARGIN.
        if (isNotNull(this.frame)) {
            let boundingBox = new BoundingBox({x1: this.x, y1: this.y, x2: this.x + requiredGroupWidth, y2: this.y2});
            requiredGroupWidth = this.frame.widthToFit(boundingBox);
        }
        requiredGroupWidth = Math.max(requiredGroupWidth, this.minWidth);

        //*****************************
        // Add to the group the child, its resizing policy, and its gravity.
        this.children.push(new VerticalGroupChild(...arguments));
        this.getTag(SVGAreaConstants.DRAWN).appendChild(element.getTag(SVGAreaConstants.DRAWN));

        //*****************************
        // Update the group width if necessary.
        if (this.width < requiredGroupWidth) {
            this.width = requiredGroupWidth;
        }

        // Add the group as a child change listener.
        element.addChangeListener(new VerticalGroupChildChangeListener(this));

        this.enableChangeNotifications();

        this.adjustChildrenPositionAndDimension();

        this.enableGroupChangingWhenChildrenChange();
    }

    /**
     * Returns the number of children.
     * @returns {Number} The number of children.
     */
    countChildren() {
        return this._children.length;
    }

    /**
     * Returns the children at the specified index.
     * @param {number} i The index.
     * @returns {GeometricShape} The child at the specified index.
     */
    child(i) {
        return this._children[i];
    }

    disableGroupChangingWhenChildrenChange() {
        this._adjustGroupWhenChildrenChange++;
    }

    enableGroupChangingWhenChildrenChange() {
        this._adjustGroupWhenChildrenChange--;
    }

    forceContentFitting() {
        this.fitContent = true;
        this.readjustDimensions();
    }
}